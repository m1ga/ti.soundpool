/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2018 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 */
package ti.soundpool;

import android.content.Context;
import android.content.res.AssetFileDescriptor;
import android.database.Cursor;
import android.media.AudioAttributes;
import android.media.AudioManager;
import android.media.SoundPool;
import android.net.Uri;
import android.os.Build;
import android.provider.MediaStore;

import androidx.annotation.RequiresApi;
import androidx.loader.content.CursorLoader;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiC;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.titanium.util.TiRHelper;
import org.appcelerator.titanium.util.TiUrl;

import java.io.IOException;


@Kroll.module(name = "TiSoundpool", id = "ti.soundpool")
public class TiSoundpoolModule extends KrollModule {

    // Standard Debugging variables
    private static final String LCAT = "TiSoundpoolModule";
    private static final boolean DBG = TiConfig.LOGD;
    private final int MAX_STREAMS = 5;
    SoundPool soundPool;
    private int soundID;

    public TiSoundpoolModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
    }

    // Methods
    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
    @Kroll.method
    public void init() {
        AudioAttributes audioAttrib = new AudioAttributes.Builder()
                .setUsage(AudioAttributes.USAGE_MEDIA)
                .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)
                .setLegacyStreamType(AudioManager.STREAM_MUSIC)
                .build();

        soundPool = new SoundPool.Builder().setAudioAttributes(audioAttrib).setMaxStreams(MAX_STREAMS).build();
        soundPool.setOnLoadCompleteListener((soundPool, sampleId, status) -> {
            fireEvent("ready", new KrollDict());
        });
    }

    @Kroll.method
    public void load(String path) {
        String url = TiUrl.resolve(TiC.URL_ANDROID_ASSET_RESOURCES, path, null);
        try {
            Context context = TiApplication.getInstance();
            AssetFileDescriptor afd = null;
            String p = url.substring(TiConvert.ASSET_URL.length());
            afd = context.getAssets().openFd(p);
            soundID = soundPool.load(afd, 1);
        } catch (Exception e) {}
    }

    @Kroll.method
    public void play(int volume) {
        soundPool.play(soundID, volume, volume, 1, 0, 1);
    }
}
